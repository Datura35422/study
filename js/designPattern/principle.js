// 单一职责原则（SRP）：一个对象（方法）只做一件事情。
// 如何分离职责：
// 1.如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们。
// 2.职责的变化轴线仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们。
// 优缺点：
// 优点：降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，有助于代码复用和进行单元测试。
// 缺点：增加编写代码的复杂度。

// 最少知识原则（LKP）：一个软件实体应当尽可能少地与其他实体发生相互作用

// 开放-封闭原则（OCP）：软件实体（类、模块、函数）等应该是可以扩展的，但是不可修改。
// 挑选出最容易发生变化的地方，然后构造抽象来封装这些变化。
// 在不可避免发生修改的时候，尽量修改那些相对容易修改的地方。